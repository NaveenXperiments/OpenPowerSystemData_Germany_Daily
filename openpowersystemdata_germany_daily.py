# -*- coding: utf-8 -*-
"""OpenPowerSystemData_Germany_Daily

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kiXZa2VzR9a9QabKelNrkbRoy4fGb3C-
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
df_power=pd.read_csv("/content/opsd_germany_daily (1).csv")
df_power.head(10)

import pandas as pd

# Load the dataset
df_power = pd.read_csv('/content/opsd_germany_daily (1).csv')

# Replace NaN values with 0 for 'Wind', 'Solar', and 'Wind+Solar' columns
df_power[['Wind', 'Solar', 'Wind+Solar']] = df_power[['Wind', 'Solar', 'Wind+Solar']].fillna(0)

# Check for missing values after the replacement
print(df_power.isna().sum())

# Display the first few rows of the updated dataset
print(df_power.head())

import matplotlib.pyplot as plt

# Convert 'Date' column to datetime
df_power['Date'] = pd.to_datetime(df_power['Date'])
df_power.set_index('Date', inplace=True)

# Plotting Consumption, Wind, and Solar over time
fig, ax = plt.subplots(figsize=(14, 6))
df_power[['Consumption', 'Wind', 'Solar']].plot(ax=ax)
ax.set_title('Electricity Consumption, Wind and Solar Production Over Time')
ax.set_ylabel('GWh')
plt.show()

# Calculate 30-day moving averages for smooth trends
df_power['Consumption_MA'] = df_power['Consumption'].rolling(window=30).mean()
df_power['Wind_MA'] = df_power['Wind'].rolling(window=30).mean()
df_power['Solar_MA'] = df_power['Solar'].rolling(window=30).mean()

# Plotting the moving averages
fig, ax = plt.subplots(figsize=(14, 6))
df_power[['Consumption_MA', 'Wind_MA', 'Solar_MA']].plot(ax=ax)
ax.set_title('30-Day Moving Average of Electricity Consumption, Wind, and Solar Production')
ax.set_ylabel('GWh')
plt.show()

from statsmodels.tsa.seasonal import seasonal_decompose

# Seasonal decomposition of the consumption data
decomposition = seasonal_decompose(df_power['Consumption'], model='additive', period=365)

# Plotting the decomposition
fig = decomposition.plot()
fig.set_size_inches(14, 10)
plt.show()

import seaborn as sns

# Plot the correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df_power[['Consumption', 'Wind', 'Solar', 'Wind+Solar']].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Energy Variables')
plt.show()

# Group by year and plot average consumption, wind, and solar production
df_power['Year'] = df_power.index.year

# Plot yearly averages
df_yearly_mean = df_power.groupby('Year')[['Consumption', 'Wind', 'Solar']].mean()

# Plot
fig, ax = plt.subplots(figsize=(14, 6))
df_yearly_mean.plot(ax=ax)
ax.set_title('Yearly Averages of Electricity Consumption, Wind, and Solar Production')
ax.set_ylabel('GWh')
plt.show()

# Select specific range (e.g., zoom in on 2016)
start, end = '2016-01', '2016-12'
df_power.loc[start:end, ['Consumption', 'Wind', 'Solar']].plot(figsize=(14, 6))
plt.title('Electricity Production and Consumption in 2016')
plt.ylabel('GWh')
plt.show()



df_power.shape

df_power=pd.read_csv("/content/opsd_germany_daily (1).csv")
df_power.head(10)

df_power['Date']=pd.to_datetime(df_power['Date'])
df_power.set_index(df_power['Date'],inplace=True)
df_power.head(10)

df_power.tail(10)

df_power.index

df_power['year']=df_power.index.year
df_power['month']=df_power.index.month
df_power['day']=df_power.index.day
df_power

df_power.sample(5,random_state=0)

df_power.loc['2016-12-23']

df_power.loc['2016-9-30':'2016-12-31']

import matplotlib.pyplot as plt
import seaborn as sns
sns.set(rc={'figure.figsize':(16,4)})
plt.rcParams['figure.dpi']=150
df_power['Consumption'].plot(linewidth=0.4)



"""# New Section"""